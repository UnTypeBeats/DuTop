name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build:
    name: Build for ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS Intel
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dutop
            asset_name: dutop-${{ needs.create-release.outputs.version }}-x86_64-apple-darwin.tar.gz

          # macOS Apple Silicon
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dutop
            asset_name: dutop-${{ needs.create-release.outputs.version }}-aarch64-apple-darwin.tar.gz

          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: dutop
            asset_name: dutop-${{ needs.create-release.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz

          # Linux x86_64 (musl - static)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: dutop
            asset_name: dutop-${{ needs.create-release.outputs.version }}-x86_64-unknown-linux-musl.tar.gz

          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: dutop.exe
            asset_name: dutop-${{ needs.create-release.outputs.version }}-x86_64-pc-windows-msvc.zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install musl tools (Linux musl)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Package (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.asset_name }} ${{ matrix.artifact_name }}
          cd ../../..

      - name: Package (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.asset_name }} ${{ matrix.artifact_name }}
          cd ../../..

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

  build-universal-macos:
    name: Build Universal macOS Binary
    needs: create-release
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-apple-darwin
          override: true

      - name: Add ARM64 target
        run: rustup target add aarch64-apple-darwin

      - name: Build x86_64
        run: cargo build --release --target x86_64-apple-darwin

      - name: Build ARM64
        run: cargo build --release --target aarch64-apple-darwin

      - name: Create universal binary
        run: |
          lipo -create \
            target/x86_64-apple-darwin/release/dutop \
            target/aarch64-apple-darwin/release/dutop \
            -output dutop-universal

      - name: Package
        run: |
          tar czf dutop-${{ needs.create-release.outputs.version }}-universal-apple-darwin.tar.gz dutop-universal

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dutop-${{ needs.create-release.outputs.version }}-universal-apple-darwin.tar.gz
          asset_name: dutop-${{ needs.create-release.outputs.version }}-universal-apple-darwin.tar.gz
          asset_content_type: application/octet-stream
